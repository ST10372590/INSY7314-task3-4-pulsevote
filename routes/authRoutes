const express = require("express");
const { body, validationResult } = require("express-validator");
const { registerLimiter, loginLimiter} = require("../middleware/rateLimiter")

const {
  registerUser,
  registerManager,
  registerAdmin,
  login,
} = require("../controllers/authController");
const { protect, requireRole } = require("../middleware/authMiddleware");

const router = express.Router();

// -----------------------------
// Validation rules
// -----------------------------

// Email validator
const emailValidator = body("email")
  .isEmail().withMessage("Email must be valid")
  .normalizeEmail();

// Password validator for registration
const passwordValidator = body("password")
  .isLength({ min: 8 }).withMessage("Password must be at least 8 characters")
  .matches(/[A-Za-z]/).withMessage("Password must include a letter")
  .matches(/\d/).withMessage("Password must include a number")
  .trim().escape();

// -----------------------------
// Middleware to handle validation results
// -----------------------------
const validate = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    // Return validation error messages
    return res.status(400).json({ errors: errors.array() });
  }
  next();
};

// -----------------------------
// Routes
// -----------------------------

// Register a normal user (anyone can do this)
router.post(
  "/register-user",
  [emailValidator, passwordValidator],
  validate,
  registerUser
);

// Register a manager (admin-only)
router.post(
  "/register-manager",
  protect,
  requireRole("admin"),
  [emailValidator, passwordValidator],
  validate,
  registerManager
);

// Register an admin
// - If no admin exists yet → anyone can register the first admin
// - If admins exist → only an admin can register new admins
router.post(
  "/register-admin",
  [emailValidator, passwordValidator],
  validate,
  registerAdmin
);

// Login
router.post(
  "/login",
  [
    emailValidator,
    body("password").notEmpty().withMessage("Password is required").trim().escape(),
  ],
  validate,
  login
);

router.post("/register-user", registerLimiter, [emailValidator, passwordValidator], registerUser);
router.post("/register-manager", protect, requireRole("admin"), registerLimiter, [emailValidator, passwordValidator], registerManager);
router.post("/register-admin", registerLimiter, [emailValidator, passwordValidator], registerAdmin);

router.post("/login", loginLimiter, [emailValidator, body("password").notEmpty().trim().escape()], login);


module.exports = router;
